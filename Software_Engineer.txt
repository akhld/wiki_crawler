Software engineer - Wikipedia, the free encyclopedia Software engineer From Wikipedia, the free encyclopedia   (Redirected from Software Engineer) Jump to: navigation, search This article's tone or style may not reflect the encyclopedic tone used on Wikipedia. See Wikipedia's guide to writing better articles for suggestions. (November 2013) A software engineer programming for the Wikimedia Foundation Software engineers apply the principles of engineering to the design, development, maintenance, testing, and evaluation of the software and systems that make computers or anything containing software work. Contents 1 Overview 1.1 A state of the art 1.2 Regulatory classification 2 Education 2.1 Other degrees 3 Profession 3.1 KTR 3.2 Employment 3.3 Work 3.4 Certification 3.5 Impact of globalization 3.6 Prizes 4 Use of the title "Engineer" 4.1 Suitability of the term 4.2 Regulatory classification 5 See also 6 References 7 External links Overview[edit] Prior to the mid-1960s, software practitioners called themselves computer programmers or software developers, regardless of their actual jobs. Many people prefer to call themselves software developer and programmer, because most widely agree what these terms mean, while software engineer is still being debated. A prominent computing scientist, E. W. Dijkstra, wrote in a paper that the coining of the term software engineer was not useful since it was an inappropriate analogy, "The existence of the mere term has been the base of a number of extremely shallow—and false—analogies, which just confuse the issue...Computers are such exceptional gadgets that there is good reason to assume that most analogies with other disciplines are too shallow to be of any positive value, are even so shallow that they are only confusing."[1] The term programmer has often been used as a pejorative term to refer to those without the tools, skills, education, or ethics to write good quality software. In response, many practitioners called themselves software engineers to escape the stigma attached to the word programmer. In many companies, the titles programmer and software developer were changed to software engineer, for many categories of programmers.[citation needed] These terms cause confusion, because some[who?] denied any differences (arguing that everyone does essentially the same thing with software) while others[who?] use the terms to create a difference (arguing the terms mean completely different jobs).[citation needed] A state of the art[edit] This section is written like a personal reflection or opinion essay rather than an encyclopedic description of the subject. Please help improve it by rewriting it in an encyclopedic style. (April 2013) In 2004, Keith Chapple of the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.[2] The label software engineer is used very liberally in the corporate world. Very few of the practicing software engineers actually hold Engineering degrees from accredited universities. In fact, according to the Association for Computing Machinery, "most people who now function in the U.S. as serious software engineers have degrees in computer science, not in software engineering".[citation needed] (See also Regulation and licensure in engineering.) Regulatory classification[edit] The use of the title "Software Engineer" is protected by law in Iceland. Icelandic law state that a permission must be obtained from the Minister of Industry, prior to use of the title. The title is only awarded to those who have obtained a Master's degree in Software Engineering from a recognised higher educational institution. The U.S. Bureau of Labor Statistics classifies computer software engineers as a subcategory of "computer specialists", along with occupations such as computer scientist, programmer, and network administrator.[3] The BLS classifies all other engineering disciplines, including computer hardware engineers, as "engineers".[4] The U.K. has seen the alignment of the Information Technology Professional and the Engineering Professionals.[5] Software engineering in Canada has seen some contests in the courts over the use of the title "Software Engineer".[6] The Canadian Council of Professional Engineers (C.C.P.E. or "Engineers Canada") will not grant a "Professional Engineer" status/license to anyone who has not completed a recognized academic engineering program and gained at least the minimum amount of discipline-specific work experience (typically four years of full-time work experience) required.[citation needed] Engineers qualified outside Canada require a period of Canadian work experience and must write equivalency exams to obtain their "Professional Engineer" license.[7] Since 2001, the Canadian Engineering Accreditation Board has accredited several university programs in software engineering,[8] allowing graduates to apply for a professional engineering license once the other prerequisites are obtained, although this does nothing to help IT professionals using the title with degrees in other fields (such as computer science or information systems). Some of the states in the United States regulate the use of terms such as "computer engineer" and even "software engineer". These states include Texas[9] and Florida.[10] There is also a new PE (Professional Engineer) exam beginning in April 2013 for Software Engineering specifically as the process of tougher regulation moves forward. Education[edit] The examples and perspective in this article may not represent a worldwide view of the subject. Please improve this article and discuss the issue on the talk page. (November 2010) About half of all practitioners today have degrees in computer science, information systems, or information technology. A small, but growing, number of practitioners have software engineering degrees. In 1987, Imperial College London introduced the first three-year software engineering Bachelor's degree in the UK and the world; in the following year, the University of Sheffield established a similar program.[11] In 1996, the Rochester Institute of Technology established the first software engineering Bachelor's degree program in the United States, however, it did not obtain ABET accreditation until 2003, the same time as Rice University, Clarkson University, Milwaukee School of Engineering and Mississippi State University obtained theirs.[12] In 1997, PSG College of Technology in Coimbatore, India was the first to start a five-year integrated Master of Science degree in Software Engineering.[citation needed] Since then, software engineering undergraduate degrees have been established at many universities. A standard international curriculum for undergraduate software engineering degrees was recently[when?] defined by the CCSE. As of 2004[update], in the U.S., about 50 universities offer software engineering degrees, which teach both computer science and engineering principles and practices. The first software engineering Master's degree was established at Seattle University in 1979. Since then graduate software engineering degrees have been made available from many more universities. Likewise in Canada, the Canadian Engineering Accreditation Board (CEAB) of the Canadian Council of Professional Engineers has recognized several software engineering programs. In 1998, the US Naval Postgraduate School (NPS) established the first doctorate program in Software Engineering in the world.[citation needed] Additionally, many online advanced degrees in Software Engineering have appeared such as the Master of Science in Software Engineering (MSE) degree offered through the Computer Science and Engineering Department at California State University, Fullerton. Steve McConnell opines that because most universities teach computer science rather than software engineering, there is a shortage of true software engineers.[13] ETS University and UQAM were mandated by IEEE to develop the Software Engineering Body of Knowledge (SWEBOK), which has become an ISO standard describing the body of knowledge covered by a software engineer[citation needed]. Other degrees[edit] In business, some software engineering practitioners have MIS or computer information systems degrees. In embedded systems, some have electrical engineering, computer science with emphasis in "embedded systems" or computer engineering degrees, because embedded software often requires a detailed understanding of hardware. In medical software, practitioners may have medical informatics, general medical, or biology degrees.[citation needed] Some practitioners have mathematics, science, engineering, or technology degrees. Some have philosophy (logic in particular) or other non-technical degrees.[citation needed]For instance, Barry Boehm earned degrees in mathematics. And, others have no degrees.[citation needed] Profession[edit] KTR[edit] Employment[edit] See also: Software engineering demographics Most software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work on their own as Consulting Software Engineers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations required software engineers to do many or all of them. Entry-Level Software Engineer or Associate Software Engineer may be best. Some companies offer Software Engineer as an entry level position. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry (analysts, architects, developers, testers, technical support, managers) and in academia (educators, researchers). There is considerable debate over the future employment prospects for Software Engineers and other IT Professionals. For example, an online futures market called the Future of IT Jobs in America attempts to answer whether there will be more IT jobs, including software engineers, in 2012 than there were in 2002. Possible opportunities for Advancement can be as a Software Engineer, then to a Senior Software Engineer, or straight to a Senior Software Engineer, depending on skills and reputation. Work[edit] Most Software Engineers work 37 to 40 hours per week. This job is office-based, and most of the work is done during normal office hours, but can sometimes lead to working away and working late or during weekends, depending on where and when the client is situated. The job can also be done at home or anywhere a computer is set up. Certification[edit] Professional certification of software engineers is a contentious issue.[citation needed] Some see it as a tool to improve professional practice.[citation needed] Most successful certification programs in the software industry are oriented toward specific technologies, and are managed by the vendors of these technologies.[citation needed] These certification programs are tailored to the institutions that would employ people who use these technologies. The ACM had a professional certification program in the early 1980s, which was discontinued due to lack of interest.[14] As of 2006[update], the IEEE had certified over 575 software professionals.[15] In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).[16] Impact of globalization[edit] Many students in the developed world have avoided degrees related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[17] Government statistics do not currently show a threat to software engineering itself.[18][19] Often one is expected to start out as a computer programmer before being promoted to software engineer. Thus, the career path to software engineering may be rough, especially during recessions. Some career counselors suggest a student also focus on "people skills" and business skills rather than purely technical skills because such "soft skills" are allegedly more difficult to offshore. Reasonable command over reading;writing&speaking English is asked by most of employers.[20] It is the quasi-management aspects of software engineering that appear to be what has kept it from being impacted by globalization.[21] Prizes[edit] There are several prizes in the field of software engineering:[22] The CODiE awards is a yearly award issued by the Software and Information Industry Association for excellence in software development within the software industry. Jolt Awards are awards in the software industry. Stevens Award is a software engineering award given in memory of Wayne Stevens. Use of the title "Engineer"[edit] Suitability of the term[edit] Main article: Regulation and licensure in engineering Typical formal definitions of software engineering are: "the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software".[23] "an engineering discipline that is concerned with all aspects of software production"[24] "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"[25] The term has been used less formally: as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis;[26] as the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is called computer science;[27] as the term embodying the advocacy of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices.[28] Many people believe that software engineering implies a certain level of academic training, professional discipline, adherence to formal processes, and especially legal liability that often are not applied in cases of software development. A common analogy is that working in construction does not make one a civil engineer, and so writing code does not make one a software engineer. It is disputed by some — in particular by the Canadian Professional Engineers Ontario (PEO) body, that the field is not mature enough to warrant the title "engineering". The PEO disputed that "software engineering" was not an appropriate name for the field since those who practiced in the field and called themselves "software engineers" were not properly licensed professional engineers, and that they should therefore not be allowed to use the name.[29] In each of the last few decades, at least one radical new approach has entered the mainstream of software development (e.g. Structured Programming, Object Orientation), implying that the field is still changing too rapidly to be considered an engineering discipline. Proponents argue that the supposedly radical new approaches are evolutionary rather than revolutionary.[citation needed] Individual commentators have disagreed sharply on how to define software engineering or its legitimacy as an engineering discipline. David Parnas has said that software engineering is, in fact, a form of engineering.[30][31] Steve McConnell has said that it is not, but that it should be.[32] Donald Knuth has said that programming is an art and a science.[33] Edsger W. Dijkstra claimed that the terms software engineering and software engineer have been misused[clarification needed] and should be considered harmful, particularly in the United States.[34] Regulatory classification[edit] The U.K. has seen the alignment of the Information Technology Professional and the Engineering Professionals.[5] In New Zealand, IPENZ, the professional engineering organization entrusted by the New Zealand government with legal power to license and regulate chartered engineers (CPEng), recognizes software engineering as a legitimate branch of professional engineering and accepts application of software engineers to obtain chartered status provided he or she has a tertiary degree of approved subjects. Software Engineering is included but Computer Science is normally not.[35] In Canada, the use of the job title "Engineer" is controlled in each province by self-regulating professional engineering organizations, often aligned with geologists and geophysicists, and tasked with enforcement of the governing legislation. The intent is that any individual holding themselves out as an engineer (or geologist or geophysicist) has been verified to have been educated to a certain accredited level, and their professional practice is subject to a code of ethics and peer scrutiny. This system was originally designed for the practise of engineering where public safety is a concern, but extends to other branches of engineering as well, including electronics and software[citation needed]. Software engineering in Canada has seen some contests in the courts over the use of the title "Software Engineer"[6] The Canadian Council of Professional Engineers (C.C.P.E. or "Engineers Canada") will not grant a "Professional Engineer" status/license to anyone who has not completed a recognized academic engineering program.[citation needed] Engineers qualified outside Canada are similarly unable to obtain a "Professional Engineer" license.[7] Since 2001, the Canadian Engineering Accreditation Board has accredited several university programs in software engineering,[36] allowing graduates to apply for a professional engineering license once the other prerequisites are obtained, although this does nothing to help IT professionals using the title with degrees in other fields (such as computer science). Some of the United States of America regulate the use of terms such as "computer engineer" and even "software engineer". These states include at least Texas[37] and Florida.[10] Texas even goes so far as to ban anyone from writing any real-time code without an engineering license. See also[edit] Computer science portal Bachelor of Science in Information Technology Bachelor of Software Engineering Consulting software engineer Software engineering demographics Software Engineering Institute Software engineering professionalism References[edit] ^ http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD690.html E.W.Dijkstra Archive: The pragmatic engineer versus the scientific designer ^ Bureau of Labor Statistics, U.S. Department of Labor, USDL 05-2145: Occupational Employment and Wages, November 2004 ^ U.S Department of Labor and Statistics The 2000 Standard Occupational Classification (SOC) System: 15-0000 Computer and Mathematical Occupations ^ U.S Department of Labor and Statistics The 2000 Standard Occupational Classification (SOC) System: 17-0000 Architecture and Engineering Occupations ^ a b 'British Computer Society' - "BCS is licensed by the Engineering Council to award Chartered Engineer status (CEng) and Incorporated Engineer status (IEng);" [1] ^ a b 'Professional Engineers of Ontario' - "Quebec Engineers win court battle against Microsoft"[2] ^ a b Council for Access to the Profession of Engineering ^ Accredited Engineering Programs in Canada ^ IEEE Software: "What do you mean I can't call myself a Software Engineer?" ^ a b Florida Statutes: Chapter 471: Engineering ^ Cowling, A. J. 1999. The first decade of an undergraduate degree program in software engineering. Ann. Softw. Eng. 6, 1-4 (Apr. 1999), 61-90. ^ "ABET Accredited Engineering Programs". April 3, 2007. Retrieved 2007-04-03.  ^ McConnell, Steve (July 10, 2003). Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers. ISBN 978-0-321-19367-4. ^ Actually the ACM made an explicit decision not to continue with certification. 1 ^ IEEE Computer Society. "2006 IEEE COMPUTER SOCIETY REPORT TO THE IFIP GENERAL ASSEMBLY". Retrieved 2007-04-10.  ^ Canadian Information Processing Society. "I.S.P. Designation". Retrieved 2007-03-15.  ^ As outsourcing gathers steam, computer science interest wanes ^ Computer Programmers ^ Software developer growth slows in North America | InfoWorld | News | 2007-03-13 | By Robert Mullins, IDG News Service ^ Hot Skills, Cold Skills ^ Dual Roles: The Changing Face of IT ^ Some external links: SIGSOFT Awards ICSE's Most Influential Paper Award A list of various Software Engineering (and SE-related) Awards ^ “IEEE Standard Glossary of Software Engineering Terminology,” IEEE std 610.12-1990, 1990. ^ Sommerville, Ian (2007) [1982]. "1.1.2 What is software engineering?". Software Engineering (8th ed.). Harlow, England: Pearson Education. p. 7. ISBN 0-321-31379-8. "Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases: 1. Engineering discipline Engineers make things work. They apply theories, methods and tools where these are appropriate [. . .] Engineers also recognize that they must work to organizational and financial constraints. [. . .] 2. All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools, methods and theories to support software production."  ^ "Software Engineering". Information Processing (North-Holland Publishing Co.) 71: 530–538. 1972.  ^ Akram I. Salah (2002-04-05). "Engineering an Academic Program in Software Engineering". 35th Annual Midwest Instruction and Computing Symposium. Retrieved 2006-09-13. : "For some, software engineering is just a glorified name for programming. If you are a programmer, you might put 'software engineer' on your business card—never 'programmer' though." ^ Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in Software Engineering," in Deimel, Lionel E. (1990). Software Engineering Education: SEI Conference 1990, Pittsburgh, Pennsylvania, USA, April 2–3,... Springer. ISBN 0-387-97274-9. ,p. 26: "As a practical matter, we regard software engineering as the necessary preparation for the practicing, software development and maintenance professional. The Computer Scientist is preparing for further theoretical studies..." ^ David Budgen, Pearl Brereton, Barbara Kitchenham, Stephen Linkman (2004-12-14). "Realizing Evidence-based Software Engineering". Retrieved 2006-10-18. : "We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis,...." ^ Sayo, Mylene. "in a Name? Tech Sector battles Engineers on "software engineering"". Retrieved 2008-07-24.  ^ Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science Programmes". Annals of Software Engineering 6: 19–37. doi:10.1023/A:1018949113292. , p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, {Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering,....}." ^ Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science Programmes". Annals of Software Engineering 6: 19–37. doi:10.1023/A:1018949113292. , p. 20: "This paper argues that the introduction of accredited professional programs in software engineering, programmes that are modelled on programmes in traditional engineering disciplines will help to increase both the quality and quantity of graduates who are well prepared, by their education, to develop trustworthy software products." ^ McConnell, Steve (August 2003). Professional Software Development: Shorter Schedules, Better Projects, Superior Products, Enhanced Careers. Boston, MA: Addison-Wesley. ISBN 0-321-19367-9. , p. 39: "In my opinion, the answer to that question is clear: Professional software development should be engineering. Is it? No. But should it be? Unquestionably, yes. " ^ Knuth, Donald (1974). "Computer Programming as an Art". Communications of the ACM 17 (12): 667–673. Transcript of the 1974 Turing Award lecture. ^ Dijkstra, Edsger W; transcribed by Mario Béland (1993-12-03; transcription last revised 2004-11-23). "There is still a war going on (manuscript Austin, 3 December 1993)". E. W. Dijkstra Archive. The University of Texas at Austin, Department of Computer Sciences. Retrieved 2007-02-17. "When the term was coined in 1968 by F.L. Bauer of the Technological University of Munich, I welcomed it. [. . .] I interpreted the introduction of the term “software engineering” as an apt reflection of the fact that the design of software systems was an activity par excellence for the mathematical engineer. [. . .]. As soon the term arrived in the USA, it was relieved of all its technical content. It had to be so for in its original meaning it was totally unacceptable [. . .] In the mean time, software engineering has become an almost empty term, as was nicely demonstrated by Data General who overnight promoted all its programmers to the exalted rank of “software engineer”!"  Check date values in: |date= (help) ^ "Good Practice Guidelines for Software Engineering in New Zealand". IPENZ.  ^ "Accredited engineering programs by institution; Accredited engineering programs by program title". Engineers Canada. October 2011. Retrieved August 15, 2013.  ^ IEEE Software: "What do you mean I can't call myself a Software Engineer?" External links[edit] Media related to Software engineers at Wikimedia Commons v t e Software engineering Fields Computer programming Software Requirements Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software architecture Software development methodology Software development process Software quality Software quality assurance Software archaeology Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model RUP Scrum Prototype model Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML SysML Software engineers Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Ward Cunningham Ole-Johan Dahl Tom DeMarco Martin Fowler C. A. R. Hoare Watts Humphrey Michael A. Jackson Ivar Jacobson James Martin Stephen J. Mellor Bertrand Meyer David Parnas Winston W. Royce James Rumbaugh Niklaus Wirth Edward Yourdon Victor Basili Related fields Computer science Computer engineering Enterprise engineering History Management Project management Quality management Software ergonomics Systems engineering Category Commons Retrieved from "http://en.wikipedia.org/w/index.php?title=Software_engineer&oldid=581790155" Categories: Software engineering Software engineers People in information technology Computer occupations Hidden categories: Pages containing cite templates with deprecated parameters CS1 errors: dates Wikipedia articles needing style editing from November 2013 All articles needing style editing All articles with unsourced statements Articles with unsourced statements from July 2012 All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from July 2012 Wikipedia articles needing style editing from April 2013 Articles with unsourced statements from February 2008 Articles with limited geographic scope from November 2010 Articles with unsourced statements from May 2012 Vague or ambiguous time from August 2011 Articles containing potentially dated statements from 2004 All articles containing potentially dated statements Articles with unsourced statements from June 2007 Articles with unsourced statements from August 2008 Articles with unsourced statements from May 2007 Articles containing potentially dated statements from 2006 Articles with unsourced statements from February 2007 Wikipedia articles needing clarification from October 2012 Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print/export Create a book Download as PDF Printable version Languages العربية Български فارسی Shqip Українська 中文 Edit links This page was last modified on 15 November 2013 at 16:38. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view